const jwt = require('jsonwebtoken');
const AuthService = require('../services/auth.service');
const OtpService = require('../services/otp.services');
const redisClient = require('../config/redis');


const loginController = async (req, res) => {
  try {
    let { phoneNumber, password } = req.body;
    if (!phoneNumber || !password) {
      return res.status(400).json({ success: false, message: 'Thi·∫øu s·ªë ƒëi·ªán tho·∫°i ho·∫∑c m·∫≠t kh·∫©u!' });
    }
    phoneNumber = phoneNumber.replace(/[^0-9]/g, '');
    if (phoneNumber.startsWith('0')) phoneNumber = '84' + phoneNumber.substring(1);

    const { user, token } = await AuthService.loginUser(phoneNumber, password);
    res.json({
      success: true,
      message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng!',
      token,
      user: { id: user.userId, name: user.name, phoneNumber: user.phoneNumber },
    });
  } catch (error) {
    res.status(500).json({ message: 'L·ªói server', error: error.message });
  }
};

const logoutController = async (req, res) => {
  try {
    const token = req.header('Authorization')?.replace('Bearer ', '');
    if (!token) {
      return res.status(401).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y token x√°c th·ª±c' });
    }

    try {
      jwt.verify(token, process.env.JWT_SECRET);
    } catch (err) {
      return res.status(401).json({ success: false, message: 'Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n' });
    }

    await redisClient.setEx(token, 604800, 'blacklisted');
    res.json({ success: true, message: 'ƒêƒÉng xu·∫•t th√†nh c√¥ng' });
  } catch (error) {
    console.error('L·ªói trong qu√° tr√¨nh ƒëƒÉng xu·∫•t:', error);
    res.status(500).json({ success: false, message: 'L·ªói server khi x·ª≠ l√Ω ƒëƒÉng xu·∫•t' });
  }
};

const getProfileController = async (req, res) => {
  try {
      const userId = req.user.id; // L·∫•y t·ª´ JWT token qua authMiddleware
      if (!userId) {
          return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!' });
      }

      const userData = await AuthService.getProfile(userId);
      res.json({
          success: true,
          data: userData
      });
  } catch (error) {
      console.error("‚ùå L·ªói trong controller l·∫•y profile:", error.message);
      res.status(500).json({ success: false, message: 'L·ªói server', error: error.message });
  }
};

const sendOTPController = async (req, res) => {
  try {
    let { phoneNumber, purpose } = req.body;
    if (!phoneNumber) {
      return res.status(400).json({ success: false, message: 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!' });
    }
    const normalizedPhone = await OtpService.sendOTP(phoneNumber, purpose || 'register');
    res.json({ success: true, message: 'OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i!', phoneNumber: normalizedPhone });
  } catch (error) {
    res.status(400).json({ success: false, message: error.message });
  }
};

const registerController = async (req, res) => {
  try {
    const { phoneNumber, name, password, otp } = req.body;
    const missingFields = [];
    if (!phoneNumber) missingFields.push('phoneNumber');
    if (!name) missingFields.push('name');
    if (!password) missingFields.push('password');
    if (!otp) missingFields.push('otp');
    if (missingFields.length > 0) {
      return res.status(400).json({
        success: false,
        message: `Thi·∫øu th√¥ng tin: ${missingFields.join(', ')}!`,
      });
    }

    // Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
    if (!phoneNumber || !name || !password || !otp) {
       return res.status(400).json({ success: false, message: 'Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt! (phoneNumber, name, password, otp)' });
    }
     // Ki·ªÉm tra ƒë·ªãnh d·∫°ng s·ªë ƒëi·ªán tho·∫°i h·ª£p l·ªá
     const phoneRegex = /^(0\d{9}|84\d{9}|\+84\d{9})$/;
     if (!phoneRegex.test(phoneNumber)) {
       return res.status(400).json({ success: false, message: 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá!' });
     }   
    // Ki·ªÉm tra ƒë·ªô d√†i m·∫≠t kh·∫©u
    if (password.length < 10) {
      return res.status(400).json({ success: false, message: 'M·∫≠t kh·∫©u ph·∫£i d√†i √≠t nh·∫•t 10 k√Ω t·ª±!' });
    }

    // Ki·ªÉm tra m·∫≠t kh·∫©u c√≥ ch·ª©a s·ªë, k√Ω t·ª± ƒë·∫∑c bi·ªát, ch·ªØ hoa, ch·ªØ th∆∞·ªùng
    const hasNumber = /[0-9]/.test(password);
    const hasSpecialChar = /[!@#$%^&*(),.?":{}|<>]/.test(password);
    const hasUpperCase = /[A-Z]/.test(password);
    const hasLowerCase = /[a-z]/.test(password);

    if (!hasNumber || !hasSpecialChar || !hasUpperCase || !hasLowerCase) {
      return res.status(400).json({
        success: false,
        message: 'M·∫≠t kh·∫©u ph·∫£i ch·ª©a √≠t nh·∫•t m·ªôt s·ªë, m·ªôt k√Ω t·ª± ƒë·∫∑c bi·ªát, m·ªôt ch·ªØ hoa v√† m·ªôt ch·ªØ th∆∞·ªùng!'
      });
    }
    // T·∫°o user v·ªõi OTP
    const newUser = await AuthService.createUser(phoneNumber, password, name, otp);

    // T·∫°o JWT token
    const token = jwt.sign(
      { id: newUser.userId, name: newUser.name, phoneNumber: newUser.phoneNumber },
      process.env.JWT_SECRET,
      { expiresIn: '7d' }
    );

    res.status(201).json({
      success: true,
      message: 'ƒêƒÉng k√Ω th√†nh c√¥ng!',
      token,
      user: { id: newUser.userId, name: newUser.name, phoneNumber: newUser.phoneNumber },
    });
  } catch (error) {
    res.status(400).json({ success: false, message: error.message });
  }
};

const resetPasswordController = async (req, res) => {
  try {
    let { phoneNumber, otp, newPassword } = req.body;
    if (!phoneNumber || !otp || !newPassword) {
      return res.status(400).json({ success: false, message: 'Thi·∫øu th√¥ng tin c·∫ßn thi·∫øt!' });
    }

    await OtpService.verifyOTP(phoneNumber, otp);
    const user = await OtpService.getUserByPhoneNumber(phoneNumber);
    if (!user) {
      return res.status(404).json({ success: false, message: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!' });
    }

    await AuthService.updateUserPassword(user.userId, newPassword, phoneNumber);
    // X√≥a OTP sau khi c·∫≠p nh·∫≠t m·∫≠t kh·∫©u th√†nh c√¥ng
    await OtpService.deleteOTP(phoneNumber);

    res.json({ success: true, message: 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng!' });
  } catch (error) {
    res.status(400).json({ success: false, message: error.message });
  }
};



const changePasswordController = async (req, res) => {
  try {
      const { oldPassword, newPassword } = req.body;
      const userId = req.user.id; // L·∫•y t·ª´ JWT token qua middleware

      if (!oldPassword || !newPassword) {
          return res.status(400).json({ message: "Thi·∫øu m·∫≠t kh·∫©u c≈© ho·∫∑c m·∫≠t kh·∫©u m·ªõi!" });
      }

      const result = await AuthService.changeUserPassword(userId, oldPassword, newPassword);
      return res.status(200).json({ success: true, message: result.message });
  } catch (error) {
      console.error("‚ùå L·ªói ƒë·ªïi m·∫≠t kh·∫©u:", error.message);
      return res.status(400).json({ success: false, message: error.message });
  }
};

const verifyOTPController = async (req, res) => {
  try {
    const { phoneNumber, otp } = req.body;
    if (!phoneNumber) {
      return res.status(400).json({ success: false, message: 'S·ªë ƒëi·ªán tho·∫°i kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!' });
    }
    if (!otp) {
      return res.status(400).json({ success: false, message: 'OTP kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!' });
    }
    if (otp.length !== 6 || !/^\d{6}$/.test(otp)) {
      return res.status(400).json({ success: false, message: 'M√£ OTP ph·∫£i l√† 6 ch·ªØ s·ªë!' });
    }

    await OtpService.verifyOTP(phoneNumber, otp);
    res.json({ success: true, message: 'X√°c nh·∫≠n OTP th√†nh c√¥ng!' });
  } catch (error) {
    res.status(400).json({ success: false, message: error.message });
  }
};

const updateUserProfileController = async (req, res) => {
  try {
    console.log("üîç req.body:", req.body);
    console.log("üîç req.files:", req.files);

    // L·∫•y d·ªØ li·ªáu t·ª´ req.body
    const { dateOfBirth, gender, phoneNumber, name, bio } = req.body;
    const userId = req.user.id;

    // X·ª≠ l√Ω file t·ª´ req.files
    const avatarFile = req.files?.avatar ? req.files.avatar[0] : null;
    const coverPhotoFile = req.files?.coverPhoto ? req.files.coverPhoto[0] : null;

    if (avatarFile) {
      console.log("üîç Avatar file details:", avatarFile);
    } else {
      console.log("üîç No avatar file received");
    }
    if (coverPhotoFile) {
      console.log("üîç Cover photo file details:", coverPhotoFile);
    } else {
      console.log("üîç No cover photo file received");
    }

    // T·∫°o object updates
    const updates = {
      dateOfBirth,
      gender,
      phoneNumber,
      name,
      bio
    };

    // T·∫°o object files ch·ª©a c·∫£ avatar v√† coverPhoto
    const files = {
      avatar: avatarFile,
      coverPhoto: coverPhotoFile
    };

    // G·ªçi service v·ªõi userId, updates, v√† files
    const updatedProfile = await AuthService.updateUserProfile(userId, updates, files);

    return res.status(200).json({ success: true, data: updatedProfile });
  } catch (error) {
    console.error("‚ùå L·ªói c·∫≠p nh·∫≠t profile:", error.message);
    return res.status(400).json({ success: false, message: error.message });
  }
};

module.exports = {
  loginController,
  logoutController,
  getProfileController,
  sendOTPController,
  registerController,
  resetPasswordController,
  verifyOTPController,
  updateUserProfileController,
  changePasswordController
  // sendMessage: [upload.single('file'), sendMessage],
};
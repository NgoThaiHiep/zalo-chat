const jwt = require("jsonwebtoken");
const JWT_SECRET = process.env.JWT_SECRET;

const authMiddleware = (req, res, next) => {
    try {
        console.log("üìå Authorization header:", req.header("Authorization")); // Debug header
        const token = req.header("Authorization");
        if (!token) {
            console.log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y token");
            return res.status(401).json({ message: "Kh√¥ng c√≥ token, t·ª´ ch·ªëi truy c·∫≠p!" });
        }

        const tokenValue = token.replace("Bearer ", "").trim();
        console.log("üìå Token sau khi x·ª≠ l√Ω:", tokenValue); // Debug token

        const decoded = jwt.verify(tokenValue, JWT_SECRET);
        console.log("üìå Decoded token:", decoded); // Debug decoded

        req.user = decoded;
        console.log("üìå req.user ƒë∆∞·ª£c g√°n:", req.user); // Debug req.user
        next();
    } catch (error) {
        console.error("‚ùå L·ªói x√°c th·ª±c token:", error.message);
        return res.status(401).json({ success: false, message: "Token kh√¥ng h·ª£p l·ªá!" });
    }
};

const checkOwnership = (req, res, next) => {
    const userIdFromToken = req.user.id;
    const userIdFromRequest = req.body.userId || req.params.userId; // N·∫øu c√≥ userId trong body ho·∫∑c params

    if (userIdFromRequest && userIdFromToken !== userIdFromRequest) {
        return res.status(403).json({ success: false, message: "B·∫°n kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t th√¥ng tin c·ªßa ng∆∞·ªùi d√πng kh√°c!" });
    }
    next();
};
module.exports = {authMiddleware , checkOwnership }
// Ch·ª©a c√°c h√†m li√™n quan ƒë·∫øn ƒëƒÉng nh·∫≠p v√† ƒëƒÉng k√Ω
const { s3,dynamoDB } = require('../config/aws.config');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const { v4: uuidv4 } = require('uuid');
const { verifyOTP, deleteOTP,getUserByPhoneNumber } = require('./otp.services');
require('dotenv').config();

const normalizePhoneNumber = (phoneNumber) => {
    console.log(`Chu·∫©n h√≥a s·ªë ƒëi·ªán tho·∫°i: ${phoneNumber} -> ${phoneNumber.replace(/^(\+84|0)/, '84')}`);
    return phoneNumber.replace(/^(\+84|0)/, '84');
  };


const createUser = async (phoneNumber, password, name, otp) => {
    // Ki·ªÉm tra OTP tr∆∞·ªõc khi t·∫°o user
    const normalizedPhone = await verifyOTP(phoneNumber, otp);
  
    // T·∫°o user
    const userId = uuidv4();
    const hashedPassword = await bcrypt.hash(password, 10);
    const user = {
      userId,
      phoneNumber: normalizedPhone,
      password: hashedPassword,
      name,
      createdAt: new Date().toISOString(),
    };
  
    await dynamoDB.put({ TableName: 'Users', Item: user }).promise();
  
    // X√≥a OTP sau khi t·∫°o user th√†nh c√¥ng
    await deleteOTP(phoneNumber);
  
    return user;
  };

const loginUser = async (phoneNumber, password) => {
    const normalizedPhone = normalizePhoneNumber(phoneNumber);
    const user = await getUserByPhoneNumber(normalizedPhone);

    if (!user) {
        throw new Error("Sai s·ªë ƒëi·ªán tho·∫°i ho·∫∑c m·∫≠t kh·∫©u!");
    }

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
        throw new Error("Sai s·ªë ƒëi·ªán tho·∫°i ho·∫∑c m·∫≠t kh·∫©u!");
    }

    const token = jwt.sign(
        { id: user.userId, name: user.name, phoneNumber: user.phoneNumber },
        process.env.JWT_SECRET,
        { expiresIn: "7d" }
    );

    return { user, token };
};


// C·∫≠p nh·∫≠t profile
const updateUserProfile = async (userId, updates, files) => {
    try {
      const { dateOfBirth, gender, phoneNumber, name, bio } = updates;
      let avatarUrl = null;
      let coverPhotoUrl = null;
  
      // X·ª≠ l√Ω upload ·∫£nh n·∫øu c√≥ file
      if (files) {
        if (files.avatar) {
          console.log("üîç Avatar MIME type:", files.avatar.mimetype);
          const mimeType = files.avatar.mimetype;
          const allowedTypes = ["image/jpeg", "image/png", "image/gif"];
          if (!allowedTypes.includes(mimeType)) {
            throw new Error(`ƒê·ªãnh d·∫°ng ·∫£nh avatar kh√¥ng h·ªó tr·ª£! MIME type: ${mimeType}`);
          }
          const s3Key = `avatars/${userId}/${uuidv4()}.${mimeType.split('/')[1]}`;
          await s3.upload({
            Bucket: process.env.BUCKET_AVATA_PROFILE,
            Key: s3Key,
            Body: files.avatar.buffer,
            ContentType: mimeType,
          }).promise();
          avatarUrl = `https://${process.env.BUCKET_AVATA_PROFILE}.s3.amazonaws.com/${s3Key}`;
        }
  
        if (files.coverPhoto) {
          console.log("üîç Cover photo MIME type:", files.coverPhoto.mimetype);
          const mimeType = files.coverPhoto.mimetype;
          const allowedTypes = ["image/jpeg", "image/png", "image/gif"];
          if (!allowedTypes.includes(mimeType)) {
            throw new Error(`ƒê·ªãnh d·∫°ng ·∫£nh b√¨a kh√¥ng h·ªó tr·ª£! MIME type: ${mimeType}`);
          }
          const s3Key = `coverPhotos/${userId}/${uuidv4()}.${mimeType.split('/')[1]}`;
          await s3.upload({
            Bucket: process.env.BUCKET_AVATA_PROFILE,
            Key: s3Key,
            Body: files.coverPhoto.buffer,
            ContentType: mimeType,
          }).promise();
          coverPhotoUrl = `https://${process.env.BUCKET_AVATA_PROFILE}.s3.amazonaws.com/${s3Key}`;
        }
      }
  
      // L·∫•y b·∫£n ghi hi·ªán t·∫°i
      const currentUser = await dynamoDB.get({
        TableName: "Users",
        Key: { userId }
      }).promise();
  
      if (!currentUser.Item) {
        throw new Error("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!");
      }
  
      // Chu·∫©n b·ªã UpdateExpression v√† ExpressionAttributeValues ƒë·ªông
      let updateExpression = "set";
      const expressionAttributeValues = {};
      const expressionAttributeNames = {};
  
      // C√°c tr∆∞·ªùng m·∫∑c ƒë·ªãnh (ch·ªâ th√™m n·∫øu ch∆∞a t·ªìn t·∫°i v√† kh√¥ng c√≥ gi√° tr·ªã m·ªõi)
      const defaultFields = {
        dateOfBirth: null,
        gender: null,
        avatar: null,
        bio: null,
        coverPhoto: null
      };
  
      if (!currentUser.Item.dateOfBirth && !dateOfBirth) {
        updateExpression += " dateOfBirth = :dobDefault,";
        expressionAttributeValues[":dobDefault"] = defaultFields.dateOfBirth;
      }
      if (!currentUser.Item.gender && !gender) {
        updateExpression += " gender = :genderDefault,";
        expressionAttributeValues[":genderDefault"] = defaultFields.gender;
      }
      if (!currentUser.Item.avatar && !avatarUrl) {
        updateExpression += " avatar = :avatarDefault,";
        expressionAttributeValues[":avatarDefault"] = defaultFields.avatar;
      }
      if (!currentUser.Item.coverPhoto && !coverPhotoUrl) {
        updateExpression += " coverPhoto = :coverPhotoDefault,";
        expressionAttributeValues[":coverPhotoDefault"] = defaultFields.coverPhoto;
      }
  
      // Th√™m c√°c tr∆∞·ªùng t·ª´ updates ho·∫∑c file
      if (dateOfBirth) {
        updateExpression += " dateOfBirth = :dob,";
        expressionAttributeValues[":dob"] = dateOfBirth;
      }
      if (gender) {
        updateExpression += " gender = :gender,";
        expressionAttributeValues[":gender"] = gender;
      }
      if (avatarUrl) {
        updateExpression += " avatar = :avatar,";
        expressionAttributeValues[":avatar"] = avatarUrl;
      }
      if (typeof bio !== 'undefined') { // X·ª≠ l√Ω bio k·ªÉ c·∫£ khi l√† "" ho·∫∑c null
        updateExpression += " bio = :bio,";
        expressionAttributeValues[":bio"] = bio === "" ? null : bio; // Chu·ªói r·ªóng -> null
      }
      if (coverPhotoUrl) {
        updateExpression += " coverPhoto = :coverPhoto,";
        expressionAttributeValues[":coverPhoto"] = coverPhotoUrl;
      }
      if (phoneNumber) {
        const normalizedPhone = normalizePhoneNumber(phoneNumber);
        updateExpression += " phoneNumber = :phone,";
        expressionAttributeValues[":phone"] = normalizedPhone;
      }
      if (name) {
        updateExpression += " #name = :name,";
        expressionAttributeValues[":name"] = name;
        expressionAttributeNames["#name"] = "name";
      }
  
      // X√≥a d·∫•u ph·∫©y cu·ªëi c√πng
      updateExpression = updateExpression.slice(0, -1);
      if (updateExpression === "set") {
        throw new Error("Kh√¥ng c√≥ th√¥ng tin n√†o ƒë·ªÉ c·∫≠p nh·∫≠t!");
      }
  
      const params = {
        TableName: "Users",
        Key: { userId },
        UpdateExpression: updateExpression,
        ExpressionAttributeValues: expressionAttributeValues,
        ExpressionAttributeNames: Object.keys(expressionAttributeNames).length > 0 ? expressionAttributeNames : undefined,
        ReturnValues: "ALL_NEW"
      };
  
      const result = await dynamoDB.update(params).promise();
      return result.Attributes;
    } catch (error) {
      console.error("‚ùå L·ªói c·∫≠p nh·∫≠t profile:", error);
      throw new Error(error.message || "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t profile!");
    }
  };
  
const updateUserPassword = async (userId, newPassword,phoneNumber) => {
    const hashedPassword = await bcrypt.hash(newPassword, 10);
    try {
        await dynamoDB.update({
            TableName: "Users",
            Key: { userId },
            UpdateExpression: "set password = :password",
            ExpressionAttributeValues: {
                ":password": hashedPassword
            }
        }).promise();
          // X√≥a OTP sau khi update m·∫≠t kh·∫©u
          await deleteOTP(phoneNumber);
    } catch (error) {
        console.error("‚ùå L·ªói c·∫≠p nh·∫≠t m·∫≠t kh·∫©u:", error);
        throw new Error("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t m·∫≠t kh·∫©u!");
    }
};

// C·∫≠p nh·∫≠t m·∫≠t kh·∫©u khi ƒëang ƒëƒÉng nh·∫≠p
const changeUserPassword = async (userId, oldPassword, newPassword) => {
    try {
        // L·∫•y th√¥ng tin user t·ª´ DynamoDB
        const userData = await dynamoDB.get({
            TableName: "Users",
            Key: { userId }
        }).promise();

        if (!userData.Item) {
            throw new Error("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!");
        }

        // Ki·ªÉm tra m·∫≠t kh·∫©u c≈©
        const isMatch = await bcrypt.compare(oldPassword, userData.Item.password);
        if (!isMatch) {
            throw new Error("M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng!");
        }

        // M√£ h√≥a m·∫≠t kh·∫©u m·ªõi
        const hashedPassword = await bcrypt.hash(newPassword, 10);

        // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u trong DynamoDB
        await dynamoDB.update({
            TableName: "Users",
            Key: { userId },
            UpdateExpression: "set password = :password",
            ExpressionAttributeValues: {
                ":password": hashedPassword
            }
        }).promise();

        return { message: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!" };
    } catch (error) {
        console.error("‚ùå L·ªói c·∫≠p nh·∫≠t m·∫≠t kh·∫©u:", error);
        throw new Error(error.message || "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t m·∫≠t kh·∫©u!");
    }
};

// Th√™m h√†m getProfileService
const getProfile = async (userId) => {
    try {
        const result = await dynamoDB.get({
            TableName: 'Users',
            Key: { userId }
        }).promise();

        if (!result.Item) {
            throw new Error('Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng trong c∆° s·ªü d·ªØ li·ªáu!');
        }

        // Lo·∫°i b·ªè tr∆∞·ªùng password ƒë·ªÉ b·∫£o m·∫≠t
        const { password, ...userData } = result.Item;
        return userData;
    } catch (error) {
        console.error("‚ùå L·ªói l·∫•y profile t·ª´ service:", error.message);
        throw new Error(error.message || 'L·ªói khi l·∫•y th√¥ng tin profile!');
    }
};
module.exports = { createUser, loginUser, updateUserPassword,updateUserProfile ,changeUserPassword,getProfile};

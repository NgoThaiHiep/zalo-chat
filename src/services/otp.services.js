const redisClient = require("../config/redis");
const {dynamoDB, sns } = require("../config/aws.config");


const normalizePhoneNumber = (phoneNumber) => {
  console.log(`Chu·∫©n h√≥a s·ªë ƒëi·ªán tho·∫°i: ${phoneNumber} -> ${phoneNumber.replace(/^(\+84|0)/, '84')}`);
  return phoneNumber.replace(/^(\+84|0)/, '84');
};

// G·ª≠i OTP
const sendOTP = async (phoneNumber, purpose = 'register') => {
    const normalizedPhone = normalizePhoneNumber(phoneNumber);
    const existingUser = await getUserByPhoneNumber(normalizedPhone);
    if (purpose === 'register' && existingUser) {
      throw new Error('S·ªë ƒëi·ªán tho·∫°i ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω!');
    }
    if (purpose === 'reset-password' && !existingUser) {
      throw new Error('S·ªë ƒëi·ªán tho·∫°i kh√¥ng t·ªìn t·∫°i!');
    }
    await deleteOTP(phoneNumber);
    const otp = Math.floor(100000 + Math.random() * 900000).toString();
    await redisClient.setEx(`otp:${normalizedPhone}`, 180, otp);
    console.log(`üì© OTP g·ª≠i ƒë·∫øn ${normalizedPhone}: ${otp}`);
    try {
    await sns.publish({
      Message: `M√£ OTP c·ªßa b·∫°n l√†: ${otp}. Vui l√≤ng kh√¥ng chia s·∫ª v·ªõi ai. M√£ OTP c√≥ hi·ªáu l·ª±c trong 3 ph√∫t.`,
      PhoneNumber: `+${normalizedPhone}`,
      MessageAttributes: {
        'AWS.SNS.SMS.SenderID': { DataType: 'String', StringValue: 'OTPService' },
        'AWS.SNS.SMS.SMSType': { DataType: 'String', StringValue: 'Transactional' },
      },
    }).promise();
  } catch (error) {
    console.error('‚ùå L·ªói khi g·ª≠i SMS qua AWS SNS:', error);
    throw new Error('Kh√¥ng th·ªÉ g·ª≠i SMS OTP. Vui l√≤ng th·ª≠ l·∫°i sau!');
  }
    return normalizedPhone;
  };

const verifyOTP = async (phoneNumber, otp) => {
    const normalizedPhone = normalizePhoneNumber(phoneNumber);
    const storedOTP = await redisClient.get(`otp:${normalizedPhone}`);
  
    console.log(`üîç Ki·ªÉm tra OTP cho ${normalizedPhone}: L∆∞u=${storedOTP}, Nh·∫≠p=${otp}`);
  
    if (!storedOTP || storedOTP !== otp) {
      throw new Error('OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n!');
    }
    await redisClient.expire(`otp:${normalizedPhone}`, 600);
    console.log(`‚è≥ ƒê√£ tƒÉng th·ªùi gian s·ªëng c·ªßa OTP cho ${normalizedPhone} l√™n 10 ph√∫t`);
    return normalizedPhone;
  };
const deleteOTP = async (phoneNumber) => {
    const normalizedPhone = normalizePhoneNumber(phoneNumber);
    await redisClient.del(`otp:${normalizedPhone}`);
  };

const getUserByPhoneNumber = async (phoneNumber) => {
    const normalizedPhone = normalizePhoneNumber(phoneNumber);
    const params = {
        TableName: "Users",
        IndexName: "phoneNumber-index",
        KeyConditionExpression: "phoneNumber = :phoneNumber",
        ExpressionAttributeValues: {
            ":phoneNumber": normalizedPhone
        }
    };

    try {
        const result = await dynamoDB.query(params).promise();
        return result.Items.length > 0 ? result.Items[0] : null;
    } catch (error) {
        console.error("‚ùå L·ªói truy v·∫•n DynamoDB:", error);
        throw new Error("Kh√¥ng th·ªÉ t√¨m ng∆∞·ªùi d√πng.");
    }
};


module.exports = { sendOTP, verifyOTP,deleteOTP,getUserByPhoneNumber };